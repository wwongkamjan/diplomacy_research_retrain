// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diplomacy_proto/game.proto

#include "diplomacy_proto/game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_diplomacy_5fproto_2fcommon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FloatList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StringList;
}  // namespace protobuf_diplomacy_5fproto_2fcommon_2eproto
namespace protobuf_diplomacy_5fproto_2fgame_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fgame_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PhaseHistory_PolicyDetails;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fgame_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PhaseHistory_StateValueEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fgame_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SavedGame_KeywordArgs;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fgame_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_State_Builds;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fgame_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_State_CivilDisorderEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fgame_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PhaseHistory_OrdersEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fgame_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PhaseHistory_PolicyEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fgame_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PhaseHistory_PossibleOrdersEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fgame_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PhaseHistory_ResultsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fgame_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SavedGame_KwargsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fgame_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SavedGame_ReturnsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fgame_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SavedGame_RewardsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fgame_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_State_BuildsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fgame_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_State_CentersEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fgame_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_State_HomesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fgame_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_State_InfluenceEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fgame_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_State_UnitsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fgame_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_PhaseHistory;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5fproto_2fgame_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_State;
}  // namespace protobuf_diplomacy_5fproto_2fgame_2eproto
namespace diplomacy_proto {
class MessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message>
      _instance;
} _Message_default_instance_;
class State_BuildsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<State_Builds>
      _instance;
} _State_Builds_default_instance_;
class State_UnitsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<State_UnitsEntry_DoNotUse>
      _instance;
} _State_UnitsEntry_DoNotUse_default_instance_;
class State_CentersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<State_CentersEntry_DoNotUse>
      _instance;
} _State_CentersEntry_DoNotUse_default_instance_;
class State_HomesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<State_HomesEntry_DoNotUse>
      _instance;
} _State_HomesEntry_DoNotUse_default_instance_;
class State_InfluenceEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<State_InfluenceEntry_DoNotUse>
      _instance;
} _State_InfluenceEntry_DoNotUse_default_instance_;
class State_CivilDisorderEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<State_CivilDisorderEntry_DoNotUse>
      _instance;
} _State_CivilDisorderEntry_DoNotUse_default_instance_;
class State_BuildsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<State_BuildsEntry_DoNotUse>
      _instance;
} _State_BuildsEntry_DoNotUse_default_instance_;
class StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<State>
      _instance;
} _State_default_instance_;
class PhaseHistory_PolicyDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PhaseHistory_PolicyDetails>
      _instance;
} _PhaseHistory_PolicyDetails_default_instance_;
class PhaseHistory_OrdersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PhaseHistory_OrdersEntry_DoNotUse>
      _instance;
} _PhaseHistory_OrdersEntry_DoNotUse_default_instance_;
class PhaseHistory_ResultsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PhaseHistory_ResultsEntry_DoNotUse>
      _instance;
} _PhaseHistory_ResultsEntry_DoNotUse_default_instance_;
class PhaseHistory_PolicyEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PhaseHistory_PolicyEntry_DoNotUse>
      _instance;
} _PhaseHistory_PolicyEntry_DoNotUse_default_instance_;
class PhaseHistory_StateValueEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PhaseHistory_StateValueEntry_DoNotUse>
      _instance;
} _PhaseHistory_StateValueEntry_DoNotUse_default_instance_;
class PhaseHistory_PossibleOrdersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PhaseHistory_PossibleOrdersEntry_DoNotUse>
      _instance;
} _PhaseHistory_PossibleOrdersEntry_DoNotUse_default_instance_;
class PhaseHistoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PhaseHistory>
      _instance;
} _PhaseHistory_default_instance_;
class SavedGame_KeywordArgsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SavedGame_KeywordArgs>
      _instance;
} _SavedGame_KeywordArgs_default_instance_;
class SavedGame_KwargsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SavedGame_KwargsEntry_DoNotUse>
      _instance;
} _SavedGame_KwargsEntry_DoNotUse_default_instance_;
class SavedGame_RewardsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SavedGame_RewardsEntry_DoNotUse>
      _instance;
} _SavedGame_RewardsEntry_DoNotUse_default_instance_;
class SavedGame_ReturnsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SavedGame_ReturnsEntry_DoNotUse>
      _instance;
} _SavedGame_ReturnsEntry_DoNotUse_default_instance_;
class SavedGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SavedGame>
      _instance;
} _SavedGame_default_instance_;
}  // namespace diplomacy_proto
namespace protobuf_diplomacy_5fproto_2fgame_2eproto {
static void InitDefaultsMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_Message_default_instance_;
    new (ptr) ::diplomacy_proto::Message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy_proto::Message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Message =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMessage}, {}};

static void InitDefaultsState_Builds() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_State_Builds_default_instance_;
    new (ptr) ::diplomacy_proto::State_Builds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy_proto::State_Builds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_State_Builds =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsState_Builds}, {}};

static void InitDefaultsState_UnitsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_State_UnitsEntry_DoNotUse_default_instance_;
    new (ptr) ::diplomacy_proto::State_UnitsEntry_DoNotUse();
  }
  ::diplomacy_proto::State_UnitsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_State_UnitsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsState_UnitsEntry_DoNotUse}, {
      &protobuf_diplomacy_5fproto_2fcommon_2eproto::scc_info_StringList.base,}};

static void InitDefaultsState_CentersEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_State_CentersEntry_DoNotUse_default_instance_;
    new (ptr) ::diplomacy_proto::State_CentersEntry_DoNotUse();
  }
  ::diplomacy_proto::State_CentersEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_State_CentersEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsState_CentersEntry_DoNotUse}, {
      &protobuf_diplomacy_5fproto_2fcommon_2eproto::scc_info_StringList.base,}};

static void InitDefaultsState_HomesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_State_HomesEntry_DoNotUse_default_instance_;
    new (ptr) ::diplomacy_proto::State_HomesEntry_DoNotUse();
  }
  ::diplomacy_proto::State_HomesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_State_HomesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsState_HomesEntry_DoNotUse}, {
      &protobuf_diplomacy_5fproto_2fcommon_2eproto::scc_info_StringList.base,}};

static void InitDefaultsState_InfluenceEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_State_InfluenceEntry_DoNotUse_default_instance_;
    new (ptr) ::diplomacy_proto::State_InfluenceEntry_DoNotUse();
  }
  ::diplomacy_proto::State_InfluenceEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_State_InfluenceEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsState_InfluenceEntry_DoNotUse}, {
      &protobuf_diplomacy_5fproto_2fcommon_2eproto::scc_info_StringList.base,}};

static void InitDefaultsState_CivilDisorderEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_State_CivilDisorderEntry_DoNotUse_default_instance_;
    new (ptr) ::diplomacy_proto::State_CivilDisorderEntry_DoNotUse();
  }
  ::diplomacy_proto::State_CivilDisorderEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_State_CivilDisorderEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsState_CivilDisorderEntry_DoNotUse}, {}};

static void InitDefaultsState_BuildsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_State_BuildsEntry_DoNotUse_default_instance_;
    new (ptr) ::diplomacy_proto::State_BuildsEntry_DoNotUse();
  }
  ::diplomacy_proto::State_BuildsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_State_BuildsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsState_BuildsEntry_DoNotUse}, {
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_State_Builds.base,}};

static void InitDefaultsState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_State_default_instance_;
    new (ptr) ::diplomacy_proto::State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy_proto::State::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_State =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsState}, {
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_State_UnitsEntry_DoNotUse.base,
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_State_CentersEntry_DoNotUse.base,
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_State_HomesEntry_DoNotUse.base,
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_State_InfluenceEntry_DoNotUse.base,
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_State_CivilDisorderEntry_DoNotUse.base,
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_State_BuildsEntry_DoNotUse.base,}};

static void InitDefaultsPhaseHistory_PolicyDetails() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_PhaseHistory_PolicyDetails_default_instance_;
    new (ptr) ::diplomacy_proto::PhaseHistory_PolicyDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy_proto::PhaseHistory_PolicyDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PhaseHistory_PolicyDetails =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPhaseHistory_PolicyDetails}, {}};

static void InitDefaultsPhaseHistory_OrdersEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_PhaseHistory_OrdersEntry_DoNotUse_default_instance_;
    new (ptr) ::diplomacy_proto::PhaseHistory_OrdersEntry_DoNotUse();
  }
  ::diplomacy_proto::PhaseHistory_OrdersEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PhaseHistory_OrdersEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPhaseHistory_OrdersEntry_DoNotUse}, {
      &protobuf_diplomacy_5fproto_2fcommon_2eproto::scc_info_StringList.base,}};

static void InitDefaultsPhaseHistory_ResultsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_PhaseHistory_ResultsEntry_DoNotUse_default_instance_;
    new (ptr) ::diplomacy_proto::PhaseHistory_ResultsEntry_DoNotUse();
  }
  ::diplomacy_proto::PhaseHistory_ResultsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PhaseHistory_ResultsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPhaseHistory_ResultsEntry_DoNotUse}, {
      &protobuf_diplomacy_5fproto_2fcommon_2eproto::scc_info_StringList.base,}};

static void InitDefaultsPhaseHistory_PolicyEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_PhaseHistory_PolicyEntry_DoNotUse_default_instance_;
    new (ptr) ::diplomacy_proto::PhaseHistory_PolicyEntry_DoNotUse();
  }
  ::diplomacy_proto::PhaseHistory_PolicyEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PhaseHistory_PolicyEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPhaseHistory_PolicyEntry_DoNotUse}, {
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_PhaseHistory_PolicyDetails.base,}};

static void InitDefaultsPhaseHistory_StateValueEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_PhaseHistory_StateValueEntry_DoNotUse_default_instance_;
    new (ptr) ::diplomacy_proto::PhaseHistory_StateValueEntry_DoNotUse();
  }
  ::diplomacy_proto::PhaseHistory_StateValueEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PhaseHistory_StateValueEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPhaseHistory_StateValueEntry_DoNotUse}, {}};

static void InitDefaultsPhaseHistory_PossibleOrdersEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_PhaseHistory_PossibleOrdersEntry_DoNotUse_default_instance_;
    new (ptr) ::diplomacy_proto::PhaseHistory_PossibleOrdersEntry_DoNotUse();
  }
  ::diplomacy_proto::PhaseHistory_PossibleOrdersEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PhaseHistory_PossibleOrdersEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPhaseHistory_PossibleOrdersEntry_DoNotUse}, {
      &protobuf_diplomacy_5fproto_2fcommon_2eproto::scc_info_StringList.base,}};

static void InitDefaultsPhaseHistory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_PhaseHistory_default_instance_;
    new (ptr) ::diplomacy_proto::PhaseHistory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy_proto::PhaseHistory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_PhaseHistory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsPhaseHistory}, {
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_State.base,
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_PhaseHistory_OrdersEntry_DoNotUse.base,
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_PhaseHistory_ResultsEntry_DoNotUse.base,
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_PhaseHistory_PolicyEntry_DoNotUse.base,
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_PhaseHistory_StateValueEntry_DoNotUse.base,
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_PhaseHistory_PossibleOrdersEntry_DoNotUse.base,}};

static void InitDefaultsSavedGame_KeywordArgs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_SavedGame_KeywordArgs_default_instance_;
    new (ptr) ::diplomacy_proto::SavedGame_KeywordArgs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy_proto::SavedGame_KeywordArgs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SavedGame_KeywordArgs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSavedGame_KeywordArgs}, {}};

static void InitDefaultsSavedGame_KwargsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_SavedGame_KwargsEntry_DoNotUse_default_instance_;
    new (ptr) ::diplomacy_proto::SavedGame_KwargsEntry_DoNotUse();
  }
  ::diplomacy_proto::SavedGame_KwargsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SavedGame_KwargsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSavedGame_KwargsEntry_DoNotUse}, {
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_SavedGame_KeywordArgs.base,}};

static void InitDefaultsSavedGame_RewardsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_SavedGame_RewardsEntry_DoNotUse_default_instance_;
    new (ptr) ::diplomacy_proto::SavedGame_RewardsEntry_DoNotUse();
  }
  ::diplomacy_proto::SavedGame_RewardsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SavedGame_RewardsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSavedGame_RewardsEntry_DoNotUse}, {
      &protobuf_diplomacy_5fproto_2fcommon_2eproto::scc_info_FloatList.base,}};

static void InitDefaultsSavedGame_ReturnsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_SavedGame_ReturnsEntry_DoNotUse_default_instance_;
    new (ptr) ::diplomacy_proto::SavedGame_ReturnsEntry_DoNotUse();
  }
  ::diplomacy_proto::SavedGame_ReturnsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SavedGame_ReturnsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSavedGame_ReturnsEntry_DoNotUse}, {
      &protobuf_diplomacy_5fproto_2fcommon_2eproto::scc_info_FloatList.base,}};

static void InitDefaultsSavedGame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy_proto::_SavedGame_default_instance_;
    new (ptr) ::diplomacy_proto::SavedGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy_proto::SavedGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_SavedGame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsSavedGame}, {
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_PhaseHistory.base,
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_SavedGame_KwargsEntry_DoNotUse.base,
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_SavedGame_RewardsEntry_DoNotUse.base,
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_SavedGame_ReturnsEntry_DoNotUse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Message.base);
  ::google::protobuf::internal::InitSCC(&scc_info_State_Builds.base);
  ::google::protobuf::internal::InitSCC(&scc_info_State_UnitsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_State_CentersEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_State_HomesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_State_InfluenceEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_State_CivilDisorderEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_State_BuildsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_State.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PhaseHistory_PolicyDetails.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PhaseHistory_OrdersEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PhaseHistory_ResultsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PhaseHistory_PolicyEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PhaseHistory_StateValueEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PhaseHistory_PossibleOrdersEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PhaseHistory.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SavedGame_KeywordArgs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SavedGame_KwargsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SavedGame_RewardsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SavedGame_ReturnsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SavedGame.base);
}

::google::protobuf::Metadata file_level_metadata[21];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::Message, sender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::Message, recipient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::Message, time_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::Message, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::Message, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::Message, tokens_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_Builds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_Builds, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_Builds, homes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_UnitsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_UnitsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_UnitsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_UnitsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_CentersEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_CentersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_CentersEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_CentersEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_HomesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_HomesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_HomesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_HomesEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_InfluenceEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_InfluenceEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_InfluenceEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_InfluenceEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_CivilDisorderEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_CivilDisorderEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_CivilDisorderEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_CivilDisorderEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_BuildsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_BuildsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_BuildsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State_BuildsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State, map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State, zobrist_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State, rules_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State, units_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State, centers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State, homes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State, influence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State, civil_disorder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State, builds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State, note_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::State, board_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_PolicyDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_PolicyDetails, locs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_PolicyDetails, tokens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_PolicyDetails, log_probs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_PolicyDetails, draw_action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_PolicyDetails, draw_prob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_OrdersEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_OrdersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_OrdersEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_OrdersEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_ResultsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_ResultsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_ResultsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_ResultsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_PolicyEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_PolicyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_PolicyEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_PolicyEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_StateValueEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_StateValueEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_StateValueEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_StateValueEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_PossibleOrdersEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_PossibleOrdersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_PossibleOrdersEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory_PossibleOrdersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory, orders_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory, results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory, policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory, prev_orders_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory, future_orders_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory, state_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::PhaseHistory, possible_orders_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame_KeywordArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame_KeywordArgs, player_seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame_KeywordArgs, noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame_KeywordArgs, temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame_KeywordArgs, dropout_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame_KwargsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame_KwargsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame_KwargsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame_KwargsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame_RewardsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame_RewardsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame_RewardsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame_RewardsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame_ReturnsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame_ReturnsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame_ReturnsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame_ReturnsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame, map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame, rules_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame, phases_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame, done_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame, assigned_powers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame, kwargs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame, is_partial_game_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame, start_phase_ix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame, reward_fn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame, rewards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy_proto::SavedGame, returns_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::diplomacy_proto::Message)},
  { 11, -1, sizeof(::diplomacy_proto::State_Builds)},
  { 18, 25, sizeof(::diplomacy_proto::State_UnitsEntry_DoNotUse)},
  { 27, 34, sizeof(::diplomacy_proto::State_CentersEntry_DoNotUse)},
  { 36, 43, sizeof(::diplomacy_proto::State_HomesEntry_DoNotUse)},
  { 45, 52, sizeof(::diplomacy_proto::State_InfluenceEntry_DoNotUse)},
  { 54, 61, sizeof(::diplomacy_proto::State_CivilDisorderEntry_DoNotUse)},
  { 63, 70, sizeof(::diplomacy_proto::State_BuildsEntry_DoNotUse)},
  { 72, -1, sizeof(::diplomacy_proto::State)},
  { 90, -1, sizeof(::diplomacy_proto::PhaseHistory_PolicyDetails)},
  { 100, 107, sizeof(::diplomacy_proto::PhaseHistory_OrdersEntry_DoNotUse)},
  { 109, 116, sizeof(::diplomacy_proto::PhaseHistory_ResultsEntry_DoNotUse)},
  { 118, 125, sizeof(::diplomacy_proto::PhaseHistory_PolicyEntry_DoNotUse)},
  { 127, 134, sizeof(::diplomacy_proto::PhaseHistory_StateValueEntry_DoNotUse)},
  { 136, 143, sizeof(::diplomacy_proto::PhaseHistory_PossibleOrdersEntry_DoNotUse)},
  { 145, -1, sizeof(::diplomacy_proto::PhaseHistory)},
  { 159, -1, sizeof(::diplomacy_proto::SavedGame_KeywordArgs)},
  { 168, 175, sizeof(::diplomacy_proto::SavedGame_KwargsEntry_DoNotUse)},
  { 177, 184, sizeof(::diplomacy_proto::SavedGame_RewardsEntry_DoNotUse)},
  { 186, 193, sizeof(::diplomacy_proto::SavedGame_ReturnsEntry_DoNotUse)},
  { 195, -1, sizeof(::diplomacy_proto::SavedGame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_Message_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_State_Builds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_State_UnitsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_State_CentersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_State_HomesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_State_InfluenceEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_State_CivilDisorderEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_State_BuildsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_PhaseHistory_PolicyDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_PhaseHistory_OrdersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_PhaseHistory_ResultsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_PhaseHistory_PolicyEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_PhaseHistory_StateValueEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_PhaseHistory_PossibleOrdersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_PhaseHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_SavedGame_KeywordArgs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_SavedGame_KwargsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_SavedGame_RewardsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_SavedGame_ReturnsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy_proto::_SavedGame_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "diplomacy_proto/game.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 21);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032diplomacy_proto/game.proto\022\017diplomacy_"
      "proto\032\034diplomacy_proto/common.proto\"s\n\007M"
      "essage\022\016\n\006sender\030\001 \001(\t\022\021\n\trecipient\030\002 \001("
      "\t\022\021\n\ttime_sent\030\003 \001(\003\022\r\n\005phase\030\004 \001(\t\022\017\n\007m"
      "essage\030\005 \001(\t\022\022\n\006tokens\030\006 \003(\rB\002\020\001\"\250\007\n\005Sta"
      "te\022\017\n\007game_id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\013\n\003map"
      "\030\003 \001(\t\022\024\n\014zobrist_hash\030\r \001(\t\022\r\n\005rules\030\004 "
      "\003(\t\0220\n\005units\030\005 \003(\0132!.diplomacy_proto.Sta"
      "te.UnitsEntry\0224\n\007centers\030\006 \003(\0132#.diploma"
      "cy_proto.State.CentersEntry\0220\n\005homes\030\007 \003"
      "(\0132!.diplomacy_proto.State.HomesEntry\0228\n"
      "\tinfluence\030\010 \003(\0132%.diplomacy_proto.State"
      ".InfluenceEntry\022A\n\016civil_disorder\030\t \003(\0132"
      ").diplomacy_proto.State.CivilDisorderEnt"
      "ry\0222\n\006builds\030\n \003(\0132\".diplomacy_proto.Sta"
      "te.BuildsEntry\022\014\n\004note\030\013 \001(\t\022\027\n\013board_st"
      "ate\030\014 \003(\rB\002\020\001\032&\n\006Builds\022\r\n\005count\030\001 \001(\005\022\r"
      "\n\005homes\030\002 \003(\t\032I\n\nUnitsEntry\022\013\n\003key\030\001 \001(\t"
      "\022*\n\005value\030\002 \001(\0132\033.diplomacy_proto.String"
      "List:\0028\001\032K\n\014CentersEntry\022\013\n\003key\030\001 \001(\t\022*\n"
      "\005value\030\002 \001(\0132\033.diplomacy_proto.StringLis"
      "t:\0028\001\032I\n\nHomesEntry\022\013\n\003key\030\001 \001(\t\022*\n\005valu"
      "e\030\002 \001(\0132\033.diplomacy_proto.StringList:\0028\001"
      "\032M\n\016InfluenceEntry\022\013\n\003key\030\001 \001(\t\022*\n\005value"
      "\030\002 \001(\0132\033.diplomacy_proto.StringList:\0028\001\032"
      "4\n\022CivilDisorderEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
      "lue\030\002 \001(\005:\0028\001\032L\n\013BuildsEntry\022\013\n\003key\030\001 \001("
      "\t\022,\n\005value\030\002 \001(\0132\035.diplomacy_proto.State"
      ".Builds:\0028\001\"\260\007\n\014PhaseHistory\022\014\n\004name\030\001 \001"
      "(\t\022%\n\005state\030\002 \001(\0132\026.diplomacy_proto.Stat"
      "e\0229\n\006orders\030\003 \003(\0132).diplomacy_proto.Phas"
      "eHistory.OrdersEntry\022;\n\007results\030\004 \003(\0132*."
      "diplomacy_proto.PhaseHistory.ResultsEntr"
      "y\0229\n\006policy\030\006 \003(\0132).diplomacy_proto.Phas"
      "eHistory.PolicyEntry\022\035\n\021prev_orders_stat"
      "e\030\010 \003(\rB\002\020\001\022\037\n\023future_orders_state\030\n \003(\r"
      "B\002\020\001\022B\n\013state_value\030\t \003(\0132-.diplomacy_pr"
      "oto.PhaseHistory.StateValueEntry\022J\n\017poss"
      "ible_orders\030\007 \003(\01321.diplomacy_proto.Phas"
      "eHistory.PossibleOrdersEntry\032l\n\rPolicyDe"
      "tails\022\014\n\004locs\030\001 \003(\t\022\016\n\006tokens\030\002 \003(\005\022\025\n\tl"
      "og_probs\030\003 \003(\002B\002\020\001\022\023\n\013draw_action\030\004 \001(\010\022"
      "\021\n\tdraw_prob\030\005 \001(\002\032J\n\013OrdersEntry\022\013\n\003key"
      "\030\001 \001(\t\022*\n\005value\030\002 \001(\0132\033.diplomacy_proto."
      "StringList:\0028\001\032K\n\014ResultsEntry\022\013\n\003key\030\001 "
      "\001(\t\022*\n\005value\030\002 \001(\0132\033.diplomacy_proto.Str"
      "ingList:\0028\001\032Z\n\013PolicyEntry\022\013\n\003key\030\001 \001(\t\022"
      ":\n\005value\030\002 \001(\0132+.diplomacy_proto.PhaseHi"
      "story.PolicyDetails:\0028\001\0321\n\017StateValueEnt"
      "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001\032R\n\023Po"
      "ssibleOrdersEntry\022\013\n\003key\030\001 \001(\t\022*\n\005value\030"
      "\002 \001(\0132\033.diplomacy_proto.StringList:\0028\001\"\344"
      "\005\n\tSavedGame\022\n\n\002id\030\001 \001(\t\022\013\n\003map\030\002 \001(\t\022\r\n"
      "\005rules\030\003 \003(\t\022-\n\006phases\030\004 \003(\0132\035.diplomacy"
      "_proto.PhaseHistory\022\023\n\013done_reason\030\006 \001(\t"
      "\022\027\n\017assigned_powers\030\005 \003(\t\022\017\n\007players\030\013 \003"
      "(\t\0226\n\006kwargs\030\n \003(\0132&.diplomacy_proto.Sav"
      "edGame.KwargsEntry\022\027\n\017is_partial_game\030\014 "
      "\001(\010\022\026\n\016start_phase_ix\030\t \001(\005\022\021\n\treward_fn"
      "\030\007 \001(\t\0228\n\007rewards\030\010 \003(\0132\'.diplomacy_prot"
      "o.SavedGame.RewardsEntry\0228\n\007returns\030\r \003("
      "\0132\'.diplomacy_proto.SavedGame.ReturnsEnt"
      "ry\032b\n\013KeywordArgs\022\023\n\013player_seed\030\001 \001(\005\022\r"
      "\n\005noise\030\002 \001(\002\022\023\n\013temperature\030\003 \001(\002\022\024\n\014dr"
      "opout_rate\030\005 \001(\002J\004\010\004\020\005\032U\n\013KwargsEntry\022\013\n"
      "\003key\030\001 \001(\t\0225\n\005value\030\002 \001(\0132&.diplomacy_pr"
      "oto.SavedGame.KeywordArgs:\0028\001\032J\n\014Rewards"
      "Entry\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.dipl"
      "omacy_proto.FloatList:\0028\001\032J\n\014ReturnsEntr"
      "y\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.diplomac"
      "y_proto.FloatList:\0028\001B\003\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2834);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "diplomacy_proto/game.proto", &protobuf_RegisterTypes);
  ::protobuf_diplomacy_5fproto_2fcommon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_diplomacy_5fproto_2fgame_2eproto
namespace diplomacy_proto {

// ===================================================================

void Message::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kSenderFieldNumber;
const int Message::kRecipientFieldNumber;
const int Message::kTimeSentFieldNumber;
const int Message::kPhaseFieldNumber;
const int Message::kMessageFieldNumber;
const int Message::kTokensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_Message.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy_proto.Message)
}
Message::Message(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  tokens_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_Message.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy_proto.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sender().size() > 0) {
    sender_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender(),
      GetArenaNoVirtual());
  }
  recipient_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.recipient().size() > 0) {
    recipient_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recipient(),
      GetArenaNoVirtual());
  }
  phase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.phase().size() > 0) {
    phase_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phase(),
      GetArenaNoVirtual());
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message(),
      GetArenaNoVirtual());
  }
  time_sent_ = from.time_sent_;
  // @@protoc_insertion_point(copy_constructor:diplomacy_proto.Message)
}

void Message::SharedCtor() {
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recipient_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_sent_ = GOOGLE_LONGLONG(0);
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:diplomacy_proto.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  sender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recipient_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phase_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message& Message::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_Message.base);
  return *internal_default_instance();
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy_proto.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  sender_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  recipient_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  phase_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  time_sent_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy_proto.Message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sender = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender().data(), static_cast<int>(this->sender().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.Message.sender"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string recipient = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recipient()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recipient().data(), static_cast<int>(this->recipient().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.Message.recipient"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time_sent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string phase = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phase()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phase().data(), static_cast<int>(this->phase().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.Message.phase"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.Message.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tokens = 6 [packed = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tokens())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_tokens())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy_proto.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy_proto.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy_proto.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.Message.sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sender(), output);
  }

  // string recipient = 2;
  if (this->recipient().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recipient().data(), static_cast<int>(this->recipient().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.Message.recipient");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->recipient(), output);
  }

  // int64 time_sent = 3;
  if (this->time_sent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_sent(), output);
  }

  // string phase = 4;
  if (this->phase().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phase().data(), static_cast<int>(this->phase().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.Message.phase");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->phase(), output);
  }

  // string message = 5;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.Message.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->message(), output);
  }

  // repeated uint32 tokens = 6 [packed = true];
  if (this->tokens_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _tokens_cached_byte_size_));
  }
  for (int i = 0, n = this->tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->tokens(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy_proto.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy_proto.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.Message.sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sender(), target);
  }

  // string recipient = 2;
  if (this->recipient().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recipient().data(), static_cast<int>(this->recipient().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.Message.recipient");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->recipient(), target);
  }

  // int64 time_sent = 3;
  if (this->time_sent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time_sent(), target);
  }

  // string phase = 4;
  if (this->phase().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phase().data(), static_cast<int>(this->phase().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.Message.phase");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->phase(), target);
  }

  // string message = 5;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.Message.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->message(), target);
  }

  // repeated uint32 tokens = 6 [packed = true];
  if (this->tokens_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _tokens_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->tokens_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy_proto.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy_proto.Message)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 tokens = 6 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->tokens_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tokens_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string sender = 1;
  if (this->sender().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender());
  }

  // string recipient = 2;
  if (this->recipient().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recipient());
  }

  // string phase = 4;
  if (this->phase().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phase());
  }

  // string message = 5;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // int64 time_sent = 3;
  if (this->time_sent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_sent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy_proto.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy_proto.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy_proto.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy_proto.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  if (from.sender().size() > 0) {
    set_sender(from.sender());
  }
  if (from.recipient().size() > 0) {
    set_recipient(from.recipient());
  }
  if (from.phase().size() > 0) {
    set_phase(from.phase());
  }
  if (from.message().size() > 0) {
    set_message(from.message());
  }
  if (from.time_sent() != 0) {
    set_time_sent(from.time_sent());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy_proto.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy_proto.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Message* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Message::UnsafeArenaSwap(Message* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  using std::swap;
  tokens_.InternalSwap(&other->tokens_);
  sender_.Swap(&other->sender_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recipient_.Swap(&other->recipient_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  phase_.Swap(&other->phase_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_sent_, other->time_sent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void State_Builds::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int State_Builds::kCountFieldNumber;
const int State_Builds::kHomesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

State_Builds::State_Builds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_State_Builds.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy_proto.State.Builds)
}
State_Builds::State_Builds(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  homes_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_State_Builds.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy_proto.State.Builds)
}
State_Builds::State_Builds(const State_Builds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      homes_(from.homes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:diplomacy_proto.State.Builds)
}

void State_Builds::SharedCtor() {
  count_ = 0;
}

State_Builds::~State_Builds() {
  // @@protoc_insertion_point(destructor:diplomacy_proto.State.Builds)
  SharedDtor();
}

void State_Builds::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void State_Builds::ArenaDtor(void* object) {
  State_Builds* _this = reinterpret_cast< State_Builds* >(object);
  (void)_this;
}
void State_Builds::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void State_Builds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* State_Builds::descriptor() {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const State_Builds& State_Builds::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_State_Builds.base);
  return *internal_default_instance();
}


void State_Builds::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy_proto.State.Builds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  homes_.Clear();
  count_ = 0;
  _internal_metadata_.Clear();
}

bool State_Builds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy_proto.State.Builds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string homes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_homes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->homes(this->homes_size() - 1).data(),
            static_cast<int>(this->homes(this->homes_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.State.Builds.homes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy_proto.State.Builds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy_proto.State.Builds)
  return false;
#undef DO_
}

void State_Builds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy_proto.State.Builds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated string homes = 2;
  for (int i = 0, n = this->homes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->homes(i).data(), static_cast<int>(this->homes(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.State.Builds.homes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->homes(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy_proto.State.Builds)
}

::google::protobuf::uint8* State_Builds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy_proto.State.Builds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated string homes = 2;
  for (int i = 0, n = this->homes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->homes(i).data(), static_cast<int>(this->homes(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.State.Builds.homes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->homes(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy_proto.State.Builds)
  return target;
}

size_t State_Builds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy_proto.State.Builds)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string homes = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->homes_size());
  for (int i = 0, n = this->homes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->homes(i));
  }

  // int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State_Builds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy_proto.State.Builds)
  GOOGLE_DCHECK_NE(&from, this);
  const State_Builds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const State_Builds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy_proto.State.Builds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy_proto.State.Builds)
    MergeFrom(*source);
  }
}

void State_Builds::MergeFrom(const State_Builds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy_proto.State.Builds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  homes_.MergeFrom(from.homes_);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void State_Builds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy_proto.State.Builds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State_Builds::CopyFrom(const State_Builds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy_proto.State.Builds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State_Builds::IsInitialized() const {
  return true;
}

void State_Builds::Swap(State_Builds* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    State_Builds* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void State_Builds::UnsafeArenaSwap(State_Builds* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void State_Builds::InternalSwap(State_Builds* other) {
  using std::swap;
  homes_.InternalSwap(CastToBase(&other->homes_));
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata State_Builds::GetMetadata() const {
  protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

State_UnitsEntry_DoNotUse::State_UnitsEntry_DoNotUse() {}
State_UnitsEntry_DoNotUse::State_UnitsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void State_UnitsEntry_DoNotUse::MergeFrom(const State_UnitsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata State_UnitsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[2];
}
void State_UnitsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

State_CentersEntry_DoNotUse::State_CentersEntry_DoNotUse() {}
State_CentersEntry_DoNotUse::State_CentersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void State_CentersEntry_DoNotUse::MergeFrom(const State_CentersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata State_CentersEntry_DoNotUse::GetMetadata() const {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[3];
}
void State_CentersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

State_HomesEntry_DoNotUse::State_HomesEntry_DoNotUse() {}
State_HomesEntry_DoNotUse::State_HomesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void State_HomesEntry_DoNotUse::MergeFrom(const State_HomesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata State_HomesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[4];
}
void State_HomesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

State_InfluenceEntry_DoNotUse::State_InfluenceEntry_DoNotUse() {}
State_InfluenceEntry_DoNotUse::State_InfluenceEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void State_InfluenceEntry_DoNotUse::MergeFrom(const State_InfluenceEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata State_InfluenceEntry_DoNotUse::GetMetadata() const {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[5];
}
void State_InfluenceEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

State_CivilDisorderEntry_DoNotUse::State_CivilDisorderEntry_DoNotUse() {}
State_CivilDisorderEntry_DoNotUse::State_CivilDisorderEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void State_CivilDisorderEntry_DoNotUse::MergeFrom(const State_CivilDisorderEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata State_CivilDisorderEntry_DoNotUse::GetMetadata() const {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[6];
}
void State_CivilDisorderEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

State_BuildsEntry_DoNotUse::State_BuildsEntry_DoNotUse() {}
State_BuildsEntry_DoNotUse::State_BuildsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void State_BuildsEntry_DoNotUse::MergeFrom(const State_BuildsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata State_BuildsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[7];
}
void State_BuildsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void State::InitAsDefaultInstance() {
}
void State::clear_units() {
  units_.Clear();
}
void State::clear_centers() {
  centers_.Clear();
}
void State::clear_homes() {
  homes_.Clear();
}
void State::clear_influence() {
  influence_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int State::kGameIdFieldNumber;
const int State::kNameFieldNumber;
const int State::kMapFieldNumber;
const int State::kZobristHashFieldNumber;
const int State::kRulesFieldNumber;
const int State::kUnitsFieldNumber;
const int State::kCentersFieldNumber;
const int State::kHomesFieldNumber;
const int State::kInfluenceFieldNumber;
const int State::kCivilDisorderFieldNumber;
const int State::kBuildsFieldNumber;
const int State::kNoteFieldNumber;
const int State::kBoardStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

State::State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_State.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy_proto.State)
}
State::State(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  rules_(arena),
  units_(arena),
  centers_(arena),
  homes_(arena),
  influence_(arena),
  civil_disorder_(arena),
  builds_(arena),
  board_state_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_State.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy_proto.State)
}
State::State(const State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rules_(from.rules_),
      board_state_(from.board_state_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  units_.MergeFrom(from.units_);
  centers_.MergeFrom(from.centers_);
  homes_.MergeFrom(from.homes_);
  influence_.MergeFrom(from.influence_);
  civil_disorder_.MergeFrom(from.civil_disorder_);
  builds_.MergeFrom(from.builds_);
  game_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.game_id().size() > 0) {
    game_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_id(),
      GetArenaNoVirtual());
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.map().size() > 0) {
    map_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map(),
      GetArenaNoVirtual());
  }
  note_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.note().size() > 0) {
    note_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.note(),
      GetArenaNoVirtual());
  }
  zobrist_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zobrist_hash().size() > 0) {
    zobrist_hash_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zobrist_hash(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy_proto.State)
}

void State::SharedCtor() {
  game_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  note_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zobrist_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

State::~State() {
  // @@protoc_insertion_point(destructor:diplomacy_proto.State)
  SharedDtor();
}

void State::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  game_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  note_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zobrist_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void State::ArenaDtor(void* object) {
  State* _this = reinterpret_cast< State* >(object);
  (void)_this;
}
void State::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* State::descriptor() {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const State& State::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_State.base);
  return *internal_default_instance();
}


void State::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy_proto.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  units_.Clear();
  centers_.Clear();
  homes_.Clear();
  influence_.Clear();
  civil_disorder_.Clear();
  builds_.Clear();
  board_state_.Clear();
  game_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  map_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  note_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  zobrist_hash_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy_proto.State)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->game_id().data(), static_cast<int>(this->game_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.State.game_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.State.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string map = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->map().data(), static_cast<int>(this->map().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.State.map"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string rules = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_rules()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rules(this->rules_size() - 1).data(),
            static_cast<int>(this->rules(this->rules_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.State.rules"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .diplomacy_proto.StringList> units = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          State_UnitsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              State_UnitsEntry_DoNotUse,
              ::std::string, ::diplomacy_proto::StringList,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList > > parser(&units_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.State.UnitsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .diplomacy_proto.StringList> centers = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          State_CentersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              State_CentersEntry_DoNotUse,
              ::std::string, ::diplomacy_proto::StringList,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList > > parser(&centers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.State.CentersEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .diplomacy_proto.StringList> homes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          State_HomesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              State_HomesEntry_DoNotUse,
              ::std::string, ::diplomacy_proto::StringList,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList > > parser(&homes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.State.HomesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .diplomacy_proto.StringList> influence = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          State_InfluenceEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              State_InfluenceEntry_DoNotUse,
              ::std::string, ::diplomacy_proto::StringList,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList > > parser(&influence_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.State.InfluenceEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int32> civil_disorder = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          State_CivilDisorderEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              State_CivilDisorderEntry_DoNotUse,
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&civil_disorder_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.State.CivilDisorderEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .diplomacy_proto.State.Builds> builds = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          State_BuildsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              State_BuildsEntry_DoNotUse,
              ::std::string, ::diplomacy_proto::State_Builds,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::diplomacy_proto::State_Builds > > parser(&builds_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.State.BuildsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string note = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_note()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->note().data(), static_cast<int>(this->note().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.State.note"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 board_state = 12 [packed = true];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_board_state())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 98u, input, this->mutable_board_state())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zobrist_hash = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zobrist_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zobrist_hash().data(), static_cast<int>(this->zobrist_hash().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.State.zobrist_hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy_proto.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy_proto.State)
  return false;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy_proto.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string game_id = 1;
  if (this->game_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->game_id().data(), static_cast<int>(this->game_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.State.game_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->game_id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.State.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string map = 3;
  if (this->map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map().data(), static_cast<int>(this->map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.State.map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->map(), output);
  }

  // repeated string rules = 4;
  for (int i = 0, n = this->rules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rules(i).data(), static_cast<int>(this->rules(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.State.rules");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->rules(i), output);
  }

  // map<string, .diplomacy_proto.StringList> units = 5;
  if (!this->units().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.State.UnitsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->units().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->units().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->units().begin();
          it != this->units().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<State_UnitsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(units_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<State_UnitsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->units().begin();
          it != this->units().end(); ++it) {
        entry.reset(units_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .diplomacy_proto.StringList> centers = 6;
  if (!this->centers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.State.CentersEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->centers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->centers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->centers().begin();
          it != this->centers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<State_CentersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(centers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<State_CentersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->centers().begin();
          it != this->centers().end(); ++it) {
        entry.reset(centers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .diplomacy_proto.StringList> homes = 7;
  if (!this->homes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.State.HomesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->homes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->homes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->homes().begin();
          it != this->homes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<State_HomesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(homes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<State_HomesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->homes().begin();
          it != this->homes().end(); ++it) {
        entry.reset(homes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .diplomacy_proto.StringList> influence = 8;
  if (!this->influence().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.State.InfluenceEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->influence().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->influence().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->influence().begin();
          it != this->influence().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<State_InfluenceEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(influence_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<State_InfluenceEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->influence().begin();
          it != this->influence().end(); ++it) {
        entry.reset(influence_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, int32> civil_disorder = 9;
  if (!this->civil_disorder().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.State.CivilDisorderEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->civil_disorder().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->civil_disorder().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->civil_disorder().begin();
          it != this->civil_disorder().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<State_CivilDisorderEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(civil_disorder_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<State_CivilDisorderEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->civil_disorder().begin();
          it != this->civil_disorder().end(); ++it) {
        entry.reset(civil_disorder_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .diplomacy_proto.State.Builds> builds = 10;
  if (!this->builds().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::State_Builds >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.State.BuildsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->builds().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->builds().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::State_Builds >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::State_Builds >::const_iterator
          it = this->builds().begin();
          it != this->builds().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<State_BuildsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(builds_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<State_BuildsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::State_Builds >::const_iterator
          it = this->builds().begin();
          it != this->builds().end(); ++it) {
        entry.reset(builds_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // string note = 11;
  if (this->note().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->note().data(), static_cast<int>(this->note().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.State.note");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->note(), output);
  }

  // repeated uint32 board_state = 12 [packed = true];
  if (this->board_state_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _board_state_cached_byte_size_));
  }
  for (int i = 0, n = this->board_state_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->board_state(i), output);
  }

  // string zobrist_hash = 13;
  if (this->zobrist_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zobrist_hash().data(), static_cast<int>(this->zobrist_hash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.State.zobrist_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->zobrist_hash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy_proto.State)
}

::google::protobuf::uint8* State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy_proto.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string game_id = 1;
  if (this->game_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->game_id().data(), static_cast<int>(this->game_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.State.game_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->game_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.State.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string map = 3;
  if (this->map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map().data(), static_cast<int>(this->map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.State.map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->map(), target);
  }

  // repeated string rules = 4;
  for (int i = 0, n = this->rules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rules(i).data(), static_cast<int>(this->rules(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.State.rules");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->rules(i), target);
  }

  // map<string, .diplomacy_proto.StringList> units = 5;
  if (!this->units().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.State.UnitsEntry.key");
      }
    };

    if (deterministic &&
        this->units().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->units().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->units().begin();
          it != this->units().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<State_UnitsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(units_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<State_UnitsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->units().begin();
          it != this->units().end(); ++it) {
        entry.reset(units_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .diplomacy_proto.StringList> centers = 6;
  if (!this->centers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.State.CentersEntry.key");
      }
    };

    if (deterministic &&
        this->centers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->centers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->centers().begin();
          it != this->centers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<State_CentersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(centers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<State_CentersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->centers().begin();
          it != this->centers().end(); ++it) {
        entry.reset(centers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .diplomacy_proto.StringList> homes = 7;
  if (!this->homes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.State.HomesEntry.key");
      }
    };

    if (deterministic &&
        this->homes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->homes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->homes().begin();
          it != this->homes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<State_HomesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(homes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<State_HomesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->homes().begin();
          it != this->homes().end(); ++it) {
        entry.reset(homes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .diplomacy_proto.StringList> influence = 8;
  if (!this->influence().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.State.InfluenceEntry.key");
      }
    };

    if (deterministic &&
        this->influence().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->influence().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->influence().begin();
          it != this->influence().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<State_InfluenceEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(influence_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<State_InfluenceEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->influence().begin();
          it != this->influence().end(); ++it) {
        entry.reset(influence_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, int32> civil_disorder = 9;
  if (!this->civil_disorder().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.State.CivilDisorderEntry.key");
      }
    };

    if (deterministic &&
        this->civil_disorder().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->civil_disorder().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->civil_disorder().begin();
          it != this->civil_disorder().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<State_CivilDisorderEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(civil_disorder_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<State_CivilDisorderEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->civil_disorder().begin();
          it != this->civil_disorder().end(); ++it) {
        entry.reset(civil_disorder_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .diplomacy_proto.State.Builds> builds = 10;
  if (!this->builds().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::State_Builds >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.State.BuildsEntry.key");
      }
    };

    if (deterministic &&
        this->builds().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->builds().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::State_Builds >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::State_Builds >::const_iterator
          it = this->builds().begin();
          it != this->builds().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<State_BuildsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(builds_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<State_BuildsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::State_Builds >::const_iterator
          it = this->builds().begin();
          it != this->builds().end(); ++it) {
        entry.reset(builds_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // string note = 11;
  if (this->note().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->note().data(), static_cast<int>(this->note().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.State.note");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->note(), target);
  }

  // repeated uint32 board_state = 12 [packed = true];
  if (this->board_state_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _board_state_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->board_state_, target);
  }

  // string zobrist_hash = 13;
  if (this->zobrist_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zobrist_hash().data(), static_cast<int>(this->zobrist_hash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.State.zobrist_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->zobrist_hash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy_proto.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy_proto.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string rules = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->rules_size());
  for (int i = 0, n = this->rules_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->rules(i));
  }

  // map<string, .diplomacy_proto.StringList> units = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->units_size());
  {
    ::std::unique_ptr<State_UnitsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
        it = this->units().begin();
        it != this->units().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(units_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<string, .diplomacy_proto.StringList> centers = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->centers_size());
  {
    ::std::unique_ptr<State_CentersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
        it = this->centers().begin();
        it != this->centers().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(centers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<string, .diplomacy_proto.StringList> homes = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->homes_size());
  {
    ::std::unique_ptr<State_HomesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
        it = this->homes().begin();
        it != this->homes().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(homes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<string, .diplomacy_proto.StringList> influence = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->influence_size());
  {
    ::std::unique_ptr<State_InfluenceEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
        it = this->influence().begin();
        it != this->influence().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(influence_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<string, int32> civil_disorder = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->civil_disorder_size());
  {
    ::std::unique_ptr<State_CivilDisorderEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->civil_disorder().begin();
        it != this->civil_disorder().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(civil_disorder_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<string, .diplomacy_proto.State.Builds> builds = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->builds_size());
  {
    ::std::unique_ptr<State_BuildsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::State_Builds >::const_iterator
        it = this->builds().begin();
        it != this->builds().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(builds_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // repeated uint32 board_state = 12 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->board_state_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _board_state_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string game_id = 1;
  if (this->game_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->game_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string map = 3;
  if (this->map().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->map());
  }

  // string note = 11;
  if (this->note().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->note());
  }

  // string zobrist_hash = 13;
  if (this->zobrist_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zobrist_hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy_proto.State)
  GOOGLE_DCHECK_NE(&from, this);
  const State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy_proto.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy_proto.State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy_proto.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
  units_.MergeFrom(from.units_);
  centers_.MergeFrom(from.centers_);
  homes_.MergeFrom(from.homes_);
  influence_.MergeFrom(from.influence_);
  civil_disorder_.MergeFrom(from.civil_disorder_);
  builds_.MergeFrom(from.builds_);
  board_state_.MergeFrom(from.board_state_);
  if (from.game_id().size() > 0) {
    set_game_id(from.game_id());
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.map().size() > 0) {
    set_map(from.map());
  }
  if (from.note().size() > 0) {
    set_note(from.note());
  }
  if (from.zobrist_hash().size() > 0) {
    set_zobrist_hash(from.zobrist_hash());
  }
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy_proto.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy_proto.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::Swap(State* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    State* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void State::UnsafeArenaSwap(State* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void State::InternalSwap(State* other) {
  using std::swap;
  rules_.InternalSwap(CastToBase(&other->rules_));
  units_.Swap(&other->units_);
  centers_.Swap(&other->centers_);
  homes_.Swap(&other->homes_);
  influence_.Swap(&other->influence_);
  civil_disorder_.Swap(&other->civil_disorder_);
  builds_.Swap(&other->builds_);
  board_state_.InternalSwap(&other->board_state_);
  game_id_.Swap(&other->game_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_.Swap(&other->map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  note_.Swap(&other->note_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  zobrist_hash_.Swap(&other->zobrist_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PhaseHistory_PolicyDetails::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhaseHistory_PolicyDetails::kLocsFieldNumber;
const int PhaseHistory_PolicyDetails::kTokensFieldNumber;
const int PhaseHistory_PolicyDetails::kLogProbsFieldNumber;
const int PhaseHistory_PolicyDetails::kDrawActionFieldNumber;
const int PhaseHistory_PolicyDetails::kDrawProbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhaseHistory_PolicyDetails::PhaseHistory_PolicyDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_PhaseHistory_PolicyDetails.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy_proto.PhaseHistory.PolicyDetails)
}
PhaseHistory_PolicyDetails::PhaseHistory_PolicyDetails(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  locs_(arena),
  tokens_(arena),
  log_probs_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_PhaseHistory_PolicyDetails.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy_proto.PhaseHistory.PolicyDetails)
}
PhaseHistory_PolicyDetails::PhaseHistory_PolicyDetails(const PhaseHistory_PolicyDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      locs_(from.locs_),
      tokens_(from.tokens_),
      log_probs_(from.log_probs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&draw_action_, &from.draw_action_,
    static_cast<size_t>(reinterpret_cast<char*>(&draw_prob_) -
    reinterpret_cast<char*>(&draw_action_)) + sizeof(draw_prob_));
  // @@protoc_insertion_point(copy_constructor:diplomacy_proto.PhaseHistory.PolicyDetails)
}

void PhaseHistory_PolicyDetails::SharedCtor() {
  ::memset(&draw_action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&draw_prob_) -
      reinterpret_cast<char*>(&draw_action_)) + sizeof(draw_prob_));
}

PhaseHistory_PolicyDetails::~PhaseHistory_PolicyDetails() {
  // @@protoc_insertion_point(destructor:diplomacy_proto.PhaseHistory.PolicyDetails)
  SharedDtor();
}

void PhaseHistory_PolicyDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PhaseHistory_PolicyDetails::ArenaDtor(void* object) {
  PhaseHistory_PolicyDetails* _this = reinterpret_cast< PhaseHistory_PolicyDetails* >(object);
  (void)_this;
}
void PhaseHistory_PolicyDetails::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PhaseHistory_PolicyDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PhaseHistory_PolicyDetails::descriptor() {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PhaseHistory_PolicyDetails& PhaseHistory_PolicyDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_PhaseHistory_PolicyDetails.base);
  return *internal_default_instance();
}


void PhaseHistory_PolicyDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy_proto.PhaseHistory.PolicyDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locs_.Clear();
  tokens_.Clear();
  log_probs_.Clear();
  ::memset(&draw_action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&draw_prob_) -
      reinterpret_cast<char*>(&draw_action_)) + sizeof(draw_prob_));
  _internal_metadata_.Clear();
}

bool PhaseHistory_PolicyDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy_proto.PhaseHistory.PolicyDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string locs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_locs()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->locs(this->locs_size() - 1).data(),
            static_cast<int>(this->locs(this->locs_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.PhaseHistory.PolicyDetails.locs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 tokens = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tokens())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_tokens())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float log_probs = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_log_probs())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_log_probs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool draw_action = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &draw_action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float draw_prob = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &draw_prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy_proto.PhaseHistory.PolicyDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy_proto.PhaseHistory.PolicyDetails)
  return false;
#undef DO_
}

void PhaseHistory_PolicyDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy_proto.PhaseHistory.PolicyDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string locs = 1;
  for (int i = 0, n = this->locs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->locs(i).data(), static_cast<int>(this->locs(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.PhaseHistory.PolicyDetails.locs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->locs(i), output);
  }

  // repeated int32 tokens = 2;
  if (this->tokens_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _tokens_cached_byte_size_));
  }
  for (int i = 0, n = this->tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->tokens(i), output);
  }

  // repeated float log_probs = 3 [packed = true];
  if (this->log_probs_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _log_probs_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->log_probs().data(), this->log_probs_size(), output);
  }

  // bool draw_action = 4;
  if (this->draw_action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->draw_action(), output);
  }

  // float draw_prob = 5;
  if (this->draw_prob() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->draw_prob(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy_proto.PhaseHistory.PolicyDetails)
}

::google::protobuf::uint8* PhaseHistory_PolicyDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy_proto.PhaseHistory.PolicyDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string locs = 1;
  for (int i = 0, n = this->locs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->locs(i).data(), static_cast<int>(this->locs(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.PhaseHistory.PolicyDetails.locs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->locs(i), target);
  }

  // repeated int32 tokens = 2;
  if (this->tokens_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _tokens_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->tokens_, target);
  }

  // repeated float log_probs = 3 [packed = true];
  if (this->log_probs_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _log_probs_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->log_probs_, target);
  }

  // bool draw_action = 4;
  if (this->draw_action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->draw_action(), target);
  }

  // float draw_prob = 5;
  if (this->draw_prob() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->draw_prob(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy_proto.PhaseHistory.PolicyDetails)
  return target;
}

size_t PhaseHistory_PolicyDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy_proto.PhaseHistory.PolicyDetails)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string locs = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->locs_size());
  for (int i = 0, n = this->locs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->locs(i));
  }

  // repeated int32 tokens = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->tokens_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tokens_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float log_probs = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->log_probs_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _log_probs_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bool draw_action = 4;
  if (this->draw_action() != 0) {
    total_size += 1 + 1;
  }

  // float draw_prob = 5;
  if (this->draw_prob() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhaseHistory_PolicyDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy_proto.PhaseHistory.PolicyDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const PhaseHistory_PolicyDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhaseHistory_PolicyDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy_proto.PhaseHistory.PolicyDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy_proto.PhaseHistory.PolicyDetails)
    MergeFrom(*source);
  }
}

void PhaseHistory_PolicyDetails::MergeFrom(const PhaseHistory_PolicyDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy_proto.PhaseHistory.PolicyDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locs_.MergeFrom(from.locs_);
  tokens_.MergeFrom(from.tokens_);
  log_probs_.MergeFrom(from.log_probs_);
  if (from.draw_action() != 0) {
    set_draw_action(from.draw_action());
  }
  if (from.draw_prob() != 0) {
    set_draw_prob(from.draw_prob());
  }
}

void PhaseHistory_PolicyDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy_proto.PhaseHistory.PolicyDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhaseHistory_PolicyDetails::CopyFrom(const PhaseHistory_PolicyDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy_proto.PhaseHistory.PolicyDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseHistory_PolicyDetails::IsInitialized() const {
  return true;
}

void PhaseHistory_PolicyDetails::Swap(PhaseHistory_PolicyDetails* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PhaseHistory_PolicyDetails* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PhaseHistory_PolicyDetails::UnsafeArenaSwap(PhaseHistory_PolicyDetails* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PhaseHistory_PolicyDetails::InternalSwap(PhaseHistory_PolicyDetails* other) {
  using std::swap;
  locs_.InternalSwap(CastToBase(&other->locs_));
  tokens_.InternalSwap(&other->tokens_);
  log_probs_.InternalSwap(&other->log_probs_);
  swap(draw_action_, other->draw_action_);
  swap(draw_prob_, other->draw_prob_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PhaseHistory_PolicyDetails::GetMetadata() const {
  protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

PhaseHistory_OrdersEntry_DoNotUse::PhaseHistory_OrdersEntry_DoNotUse() {}
PhaseHistory_OrdersEntry_DoNotUse::PhaseHistory_OrdersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void PhaseHistory_OrdersEntry_DoNotUse::MergeFrom(const PhaseHistory_OrdersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PhaseHistory_OrdersEntry_DoNotUse::GetMetadata() const {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[10];
}
void PhaseHistory_OrdersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

PhaseHistory_ResultsEntry_DoNotUse::PhaseHistory_ResultsEntry_DoNotUse() {}
PhaseHistory_ResultsEntry_DoNotUse::PhaseHistory_ResultsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void PhaseHistory_ResultsEntry_DoNotUse::MergeFrom(const PhaseHistory_ResultsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PhaseHistory_ResultsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[11];
}
void PhaseHistory_ResultsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

PhaseHistory_PolicyEntry_DoNotUse::PhaseHistory_PolicyEntry_DoNotUse() {}
PhaseHistory_PolicyEntry_DoNotUse::PhaseHistory_PolicyEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void PhaseHistory_PolicyEntry_DoNotUse::MergeFrom(const PhaseHistory_PolicyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PhaseHistory_PolicyEntry_DoNotUse::GetMetadata() const {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[12];
}
void PhaseHistory_PolicyEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

PhaseHistory_StateValueEntry_DoNotUse::PhaseHistory_StateValueEntry_DoNotUse() {}
PhaseHistory_StateValueEntry_DoNotUse::PhaseHistory_StateValueEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void PhaseHistory_StateValueEntry_DoNotUse::MergeFrom(const PhaseHistory_StateValueEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PhaseHistory_StateValueEntry_DoNotUse::GetMetadata() const {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[13];
}
void PhaseHistory_StateValueEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

PhaseHistory_PossibleOrdersEntry_DoNotUse::PhaseHistory_PossibleOrdersEntry_DoNotUse() {}
PhaseHistory_PossibleOrdersEntry_DoNotUse::PhaseHistory_PossibleOrdersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void PhaseHistory_PossibleOrdersEntry_DoNotUse::MergeFrom(const PhaseHistory_PossibleOrdersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PhaseHistory_PossibleOrdersEntry_DoNotUse::GetMetadata() const {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[14];
}
void PhaseHistory_PossibleOrdersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void PhaseHistory::InitAsDefaultInstance() {
  ::diplomacy_proto::_PhaseHistory_default_instance_._instance.get_mutable()->state_ = const_cast< ::diplomacy_proto::State*>(
      ::diplomacy_proto::State::internal_default_instance());
}
void PhaseHistory::unsafe_arena_set_allocated_state(
    ::diplomacy_proto::State* state) {
  if (GetArenaNoVirtual() == NULL) {
    delete state_;
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy_proto.PhaseHistory.state)
}
void PhaseHistory::clear_orders() {
  orders_.Clear();
}
void PhaseHistory::clear_results() {
  results_.Clear();
}
void PhaseHistory::clear_possible_orders() {
  possible_orders_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhaseHistory::kNameFieldNumber;
const int PhaseHistory::kStateFieldNumber;
const int PhaseHistory::kOrdersFieldNumber;
const int PhaseHistory::kResultsFieldNumber;
const int PhaseHistory::kPolicyFieldNumber;
const int PhaseHistory::kPrevOrdersStateFieldNumber;
const int PhaseHistory::kFutureOrdersStateFieldNumber;
const int PhaseHistory::kStateValueFieldNumber;
const int PhaseHistory::kPossibleOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhaseHistory::PhaseHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_PhaseHistory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy_proto.PhaseHistory)
}
PhaseHistory::PhaseHistory(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  orders_(arena),
  results_(arena),
  policy_(arena),
  possible_orders_(arena),
  prev_orders_state_(arena),
  state_value_(arena),
  future_orders_state_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_PhaseHistory.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy_proto.PhaseHistory)
}
PhaseHistory::PhaseHistory(const PhaseHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      prev_orders_state_(from.prev_orders_state_),
      future_orders_state_(from.future_orders_state_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orders_.MergeFrom(from.orders_);
  results_.MergeFrom(from.results_);
  policy_.MergeFrom(from.policy_);
  possible_orders_.MergeFrom(from.possible_orders_);
  state_value_.MergeFrom(from.state_value_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  if (from.has_state()) {
    state_ = new ::diplomacy_proto::State(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy_proto.PhaseHistory)
}

void PhaseHistory::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = NULL;
}

PhaseHistory::~PhaseHistory() {
  // @@protoc_insertion_point(destructor:diplomacy_proto.PhaseHistory)
  SharedDtor();
}

void PhaseHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete state_;
}

void PhaseHistory::ArenaDtor(void* object) {
  PhaseHistory* _this = reinterpret_cast< PhaseHistory* >(object);
  (void)_this;
}
void PhaseHistory::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PhaseHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PhaseHistory::descriptor() {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PhaseHistory& PhaseHistory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_PhaseHistory.base);
  return *internal_default_instance();
}


void PhaseHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy_proto.PhaseHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  results_.Clear();
  policy_.Clear();
  possible_orders_.Clear();
  prev_orders_state_.Clear();
  state_value_.Clear();
  future_orders_state_.Clear();
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool PhaseHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy_proto.PhaseHistory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.PhaseHistory.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy_proto.State state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .diplomacy_proto.StringList> orders = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          PhaseHistory_OrdersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PhaseHistory_OrdersEntry_DoNotUse,
              ::std::string, ::diplomacy_proto::StringList,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList > > parser(&orders_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.PhaseHistory.OrdersEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .diplomacy_proto.StringList> results = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          PhaseHistory_ResultsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PhaseHistory_ResultsEntry_DoNotUse,
              ::std::string, ::diplomacy_proto::StringList,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList > > parser(&results_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.PhaseHistory.ResultsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .diplomacy_proto.PhaseHistory.PolicyDetails> policy = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          PhaseHistory_PolicyEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PhaseHistory_PolicyEntry_DoNotUse,
              ::std::string, ::diplomacy_proto::PhaseHistory_PolicyDetails,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::diplomacy_proto::PhaseHistory_PolicyDetails > > parser(&policy_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.PhaseHistory.PolicyEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .diplomacy_proto.StringList> possible_orders = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          PhaseHistory_PossibleOrdersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PhaseHistory_PossibleOrdersEntry_DoNotUse,
              ::std::string, ::diplomacy_proto::StringList,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList > > parser(&possible_orders_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.PhaseHistory.PossibleOrdersEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 prev_orders_state = 8 [packed = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_prev_orders_state())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_prev_orders_state())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, float> state_value = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          PhaseHistory_StateValueEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PhaseHistory_StateValueEntry_DoNotUse,
              ::std::string, float,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::google::protobuf::Map< ::std::string, float > > parser(&state_value_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.PhaseHistory.StateValueEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 future_orders_state = 10 [packed = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_future_orders_state())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 82u, input, this->mutable_future_orders_state())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy_proto.PhaseHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy_proto.PhaseHistory)
  return false;
#undef DO_
}

void PhaseHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy_proto.PhaseHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.PhaseHistory.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .diplomacy_proto.State state = 2;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_state(), output);
  }

  // map<string, .diplomacy_proto.StringList> orders = 3;
  if (!this->orders().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.PhaseHistory.OrdersEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->orders().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->orders().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->orders().begin();
          it != this->orders().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PhaseHistory_OrdersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(orders_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<PhaseHistory_OrdersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->orders().begin();
          it != this->orders().end(); ++it) {
        entry.reset(orders_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .diplomacy_proto.StringList> results = 4;
  if (!this->results().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.PhaseHistory.ResultsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->results().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->results().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->results().begin();
          it != this->results().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PhaseHistory_ResultsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(results_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<PhaseHistory_ResultsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->results().begin();
          it != this->results().end(); ++it) {
        entry.reset(results_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .diplomacy_proto.PhaseHistory.PolicyDetails> policy = 6;
  if (!this->policy().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::PhaseHistory_PolicyDetails >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.PhaseHistory.PolicyEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->policy().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->policy().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::PhaseHistory_PolicyDetails >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::PhaseHistory_PolicyDetails >::const_iterator
          it = this->policy().begin();
          it != this->policy().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PhaseHistory_PolicyEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(policy_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<PhaseHistory_PolicyEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::PhaseHistory_PolicyDetails >::const_iterator
          it = this->policy().begin();
          it != this->policy().end(); ++it) {
        entry.reset(policy_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .diplomacy_proto.StringList> possible_orders = 7;
  if (!this->possible_orders().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.PhaseHistory.PossibleOrdersEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->possible_orders().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->possible_orders().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->possible_orders().begin();
          it != this->possible_orders().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PhaseHistory_PossibleOrdersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(possible_orders_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<PhaseHistory_PossibleOrdersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->possible_orders().begin();
          it != this->possible_orders().end(); ++it) {
        entry.reset(possible_orders_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated uint32 prev_orders_state = 8 [packed = true];
  if (this->prev_orders_state_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _prev_orders_state_cached_byte_size_));
  }
  for (int i = 0, n = this->prev_orders_state_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->prev_orders_state(i), output);
  }

  // map<string, float> state_value = 9;
  if (!this->state_value().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.PhaseHistory.StateValueEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->state_value().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->state_value().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->state_value().begin();
          it != this->state_value().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PhaseHistory_StateValueEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(state_value_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<PhaseHistory_StateValueEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->state_value().begin();
          it != this->state_value().end(); ++it) {
        entry.reset(state_value_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated uint32 future_orders_state = 10 [packed = true];
  if (this->future_orders_state_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _future_orders_state_cached_byte_size_));
  }
  for (int i = 0, n = this->future_orders_state_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->future_orders_state(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy_proto.PhaseHistory)
}

::google::protobuf::uint8* PhaseHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy_proto.PhaseHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.PhaseHistory.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .diplomacy_proto.State state = 2;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_state(), deterministic, target);
  }

  // map<string, .diplomacy_proto.StringList> orders = 3;
  if (!this->orders().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.PhaseHistory.OrdersEntry.key");
      }
    };

    if (deterministic &&
        this->orders().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->orders().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->orders().begin();
          it != this->orders().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PhaseHistory_OrdersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(orders_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<PhaseHistory_OrdersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->orders().begin();
          it != this->orders().end(); ++it) {
        entry.reset(orders_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .diplomacy_proto.StringList> results = 4;
  if (!this->results().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.PhaseHistory.ResultsEntry.key");
      }
    };

    if (deterministic &&
        this->results().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->results().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->results().begin();
          it != this->results().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PhaseHistory_ResultsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(results_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<PhaseHistory_ResultsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->results().begin();
          it != this->results().end(); ++it) {
        entry.reset(results_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .diplomacy_proto.PhaseHistory.PolicyDetails> policy = 6;
  if (!this->policy().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::PhaseHistory_PolicyDetails >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.PhaseHistory.PolicyEntry.key");
      }
    };

    if (deterministic &&
        this->policy().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->policy().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::PhaseHistory_PolicyDetails >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::PhaseHistory_PolicyDetails >::const_iterator
          it = this->policy().begin();
          it != this->policy().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PhaseHistory_PolicyEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(policy_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<PhaseHistory_PolicyEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::PhaseHistory_PolicyDetails >::const_iterator
          it = this->policy().begin();
          it != this->policy().end(); ++it) {
        entry.reset(policy_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .diplomacy_proto.StringList> possible_orders = 7;
  if (!this->possible_orders().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.PhaseHistory.PossibleOrdersEntry.key");
      }
    };

    if (deterministic &&
        this->possible_orders().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->possible_orders().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->possible_orders().begin();
          it != this->possible_orders().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PhaseHistory_PossibleOrdersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(possible_orders_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<PhaseHistory_PossibleOrdersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
          it = this->possible_orders().begin();
          it != this->possible_orders().end(); ++it) {
        entry.reset(possible_orders_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated uint32 prev_orders_state = 8 [packed = true];
  if (this->prev_orders_state_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _prev_orders_state_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->prev_orders_state_, target);
  }

  // map<string, float> state_value = 9;
  if (!this->state_value().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.PhaseHistory.StateValueEntry.key");
      }
    };

    if (deterministic &&
        this->state_value().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->state_value().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->state_value().begin();
          it != this->state_value().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PhaseHistory_StateValueEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(state_value_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<PhaseHistory_StateValueEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->state_value().begin();
          it != this->state_value().end(); ++it) {
        entry.reset(state_value_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated uint32 future_orders_state = 10 [packed = true];
  if (this->future_orders_state_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _future_orders_state_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->future_orders_state_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy_proto.PhaseHistory)
  return target;
}

size_t PhaseHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy_proto.PhaseHistory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .diplomacy_proto.StringList> orders = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->orders_size());
  {
    ::std::unique_ptr<PhaseHistory_OrdersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
        it = this->orders().begin();
        it != this->orders().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(orders_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<string, .diplomacy_proto.StringList> results = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->results_size());
  {
    ::std::unique_ptr<PhaseHistory_ResultsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
        it = this->results().begin();
        it != this->results().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(results_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<string, .diplomacy_proto.PhaseHistory.PolicyDetails> policy = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->policy_size());
  {
    ::std::unique_ptr<PhaseHistory_PolicyEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::PhaseHistory_PolicyDetails >::const_iterator
        it = this->policy().begin();
        it != this->policy().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(policy_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<string, .diplomacy_proto.StringList> possible_orders = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->possible_orders_size());
  {
    ::std::unique_ptr<PhaseHistory_PossibleOrdersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::StringList >::const_iterator
        it = this->possible_orders().begin();
        it != this->possible_orders().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(possible_orders_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // repeated uint32 prev_orders_state = 8 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->prev_orders_state_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _prev_orders_state_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<string, float> state_value = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->state_value_size());
  {
    ::std::unique_ptr<PhaseHistory_StateValueEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->state_value().begin();
        it != this->state_value().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(state_value_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // repeated uint32 future_orders_state = 10 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->future_orders_state_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _future_orders_state_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .diplomacy_proto.State state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhaseHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy_proto.PhaseHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const PhaseHistory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhaseHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy_proto.PhaseHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy_proto.PhaseHistory)
    MergeFrom(*source);
  }
}

void PhaseHistory::MergeFrom(const PhaseHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy_proto.PhaseHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
  results_.MergeFrom(from.results_);
  policy_.MergeFrom(from.policy_);
  possible_orders_.MergeFrom(from.possible_orders_);
  prev_orders_state_.MergeFrom(from.prev_orders_state_);
  state_value_.MergeFrom(from.state_value_);
  future_orders_state_.MergeFrom(from.future_orders_state_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.has_state()) {
    mutable_state()->::diplomacy_proto::State::MergeFrom(from.state());
  }
}

void PhaseHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy_proto.PhaseHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhaseHistory::CopyFrom(const PhaseHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy_proto.PhaseHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseHistory::IsInitialized() const {
  return true;
}

void PhaseHistory::Swap(PhaseHistory* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PhaseHistory* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PhaseHistory::UnsafeArenaSwap(PhaseHistory* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PhaseHistory::InternalSwap(PhaseHistory* other) {
  using std::swap;
  orders_.Swap(&other->orders_);
  results_.Swap(&other->results_);
  policy_.Swap(&other->policy_);
  possible_orders_.Swap(&other->possible_orders_);
  prev_orders_state_.InternalSwap(&other->prev_orders_state_);
  state_value_.Swap(&other->state_value_);
  future_orders_state_.InternalSwap(&other->future_orders_state_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PhaseHistory::GetMetadata() const {
  protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SavedGame_KeywordArgs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SavedGame_KeywordArgs::kPlayerSeedFieldNumber;
const int SavedGame_KeywordArgs::kNoiseFieldNumber;
const int SavedGame_KeywordArgs::kTemperatureFieldNumber;
const int SavedGame_KeywordArgs::kDropoutRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SavedGame_KeywordArgs::SavedGame_KeywordArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_SavedGame_KeywordArgs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy_proto.SavedGame.KeywordArgs)
}
SavedGame_KeywordArgs::SavedGame_KeywordArgs(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_SavedGame_KeywordArgs.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy_proto.SavedGame.KeywordArgs)
}
SavedGame_KeywordArgs::SavedGame_KeywordArgs(const SavedGame_KeywordArgs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_seed_, &from.player_seed_,
    static_cast<size_t>(reinterpret_cast<char*>(&dropout_rate_) -
    reinterpret_cast<char*>(&player_seed_)) + sizeof(dropout_rate_));
  // @@protoc_insertion_point(copy_constructor:diplomacy_proto.SavedGame.KeywordArgs)
}

void SavedGame_KeywordArgs::SharedCtor() {
  ::memset(&player_seed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropout_rate_) -
      reinterpret_cast<char*>(&player_seed_)) + sizeof(dropout_rate_));
}

SavedGame_KeywordArgs::~SavedGame_KeywordArgs() {
  // @@protoc_insertion_point(destructor:diplomacy_proto.SavedGame.KeywordArgs)
  SharedDtor();
}

void SavedGame_KeywordArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void SavedGame_KeywordArgs::ArenaDtor(void* object) {
  SavedGame_KeywordArgs* _this = reinterpret_cast< SavedGame_KeywordArgs* >(object);
  (void)_this;
}
void SavedGame_KeywordArgs::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SavedGame_KeywordArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SavedGame_KeywordArgs::descriptor() {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SavedGame_KeywordArgs& SavedGame_KeywordArgs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_SavedGame_KeywordArgs.base);
  return *internal_default_instance();
}


void SavedGame_KeywordArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy_proto.SavedGame.KeywordArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_seed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropout_rate_) -
      reinterpret_cast<char*>(&player_seed_)) + sizeof(dropout_rate_));
  _internal_metadata_.Clear();
}

bool SavedGame_KeywordArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy_proto.SavedGame.KeywordArgs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 player_seed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float noise = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &noise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float temperature = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dropout_rate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy_proto.SavedGame.KeywordArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy_proto.SavedGame.KeywordArgs)
  return false;
#undef DO_
}

void SavedGame_KeywordArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy_proto.SavedGame.KeywordArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_seed = 1;
  if (this->player_seed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_seed(), output);
  }

  // float noise = 2;
  if (this->noise() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->noise(), output);
  }

  // float temperature = 3;
  if (this->temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->temperature(), output);
  }

  // float dropout_rate = 5;
  if (this->dropout_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->dropout_rate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy_proto.SavedGame.KeywordArgs)
}

::google::protobuf::uint8* SavedGame_KeywordArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy_proto.SavedGame.KeywordArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_seed = 1;
  if (this->player_seed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_seed(), target);
  }

  // float noise = 2;
  if (this->noise() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->noise(), target);
  }

  // float temperature = 3;
  if (this->temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->temperature(), target);
  }

  // float dropout_rate = 5;
  if (this->dropout_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->dropout_rate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy_proto.SavedGame.KeywordArgs)
  return target;
}

size_t SavedGame_KeywordArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy_proto.SavedGame.KeywordArgs)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 player_seed = 1;
  if (this->player_seed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_seed());
  }

  // float noise = 2;
  if (this->noise() != 0) {
    total_size += 1 + 4;
  }

  // float temperature = 3;
  if (this->temperature() != 0) {
    total_size += 1 + 4;
  }

  // float dropout_rate = 5;
  if (this->dropout_rate() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SavedGame_KeywordArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy_proto.SavedGame.KeywordArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const SavedGame_KeywordArgs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SavedGame_KeywordArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy_proto.SavedGame.KeywordArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy_proto.SavedGame.KeywordArgs)
    MergeFrom(*source);
  }
}

void SavedGame_KeywordArgs::MergeFrom(const SavedGame_KeywordArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy_proto.SavedGame.KeywordArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_seed() != 0) {
    set_player_seed(from.player_seed());
  }
  if (from.noise() != 0) {
    set_noise(from.noise());
  }
  if (from.temperature() != 0) {
    set_temperature(from.temperature());
  }
  if (from.dropout_rate() != 0) {
    set_dropout_rate(from.dropout_rate());
  }
}

void SavedGame_KeywordArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy_proto.SavedGame.KeywordArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedGame_KeywordArgs::CopyFrom(const SavedGame_KeywordArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy_proto.SavedGame.KeywordArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedGame_KeywordArgs::IsInitialized() const {
  return true;
}

void SavedGame_KeywordArgs::Swap(SavedGame_KeywordArgs* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SavedGame_KeywordArgs* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SavedGame_KeywordArgs::UnsafeArenaSwap(SavedGame_KeywordArgs* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SavedGame_KeywordArgs::InternalSwap(SavedGame_KeywordArgs* other) {
  using std::swap;
  swap(player_seed_, other->player_seed_);
  swap(noise_, other->noise_);
  swap(temperature_, other->temperature_);
  swap(dropout_rate_, other->dropout_rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SavedGame_KeywordArgs::GetMetadata() const {
  protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

SavedGame_KwargsEntry_DoNotUse::SavedGame_KwargsEntry_DoNotUse() {}
SavedGame_KwargsEntry_DoNotUse::SavedGame_KwargsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SavedGame_KwargsEntry_DoNotUse::MergeFrom(const SavedGame_KwargsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SavedGame_KwargsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[17];
}
void SavedGame_KwargsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

SavedGame_RewardsEntry_DoNotUse::SavedGame_RewardsEntry_DoNotUse() {}
SavedGame_RewardsEntry_DoNotUse::SavedGame_RewardsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SavedGame_RewardsEntry_DoNotUse::MergeFrom(const SavedGame_RewardsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SavedGame_RewardsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[18];
}
void SavedGame_RewardsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

SavedGame_ReturnsEntry_DoNotUse::SavedGame_ReturnsEntry_DoNotUse() {}
SavedGame_ReturnsEntry_DoNotUse::SavedGame_ReturnsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SavedGame_ReturnsEntry_DoNotUse::MergeFrom(const SavedGame_ReturnsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SavedGame_ReturnsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[19];
}
void SavedGame_ReturnsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void SavedGame::InitAsDefaultInstance() {
}
void SavedGame::clear_rewards() {
  rewards_.Clear();
}
void SavedGame::clear_returns() {
  returns_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SavedGame::kIdFieldNumber;
const int SavedGame::kMapFieldNumber;
const int SavedGame::kRulesFieldNumber;
const int SavedGame::kPhasesFieldNumber;
const int SavedGame::kDoneReasonFieldNumber;
const int SavedGame::kAssignedPowersFieldNumber;
const int SavedGame::kPlayersFieldNumber;
const int SavedGame::kKwargsFieldNumber;
const int SavedGame::kIsPartialGameFieldNumber;
const int SavedGame::kStartPhaseIxFieldNumber;
const int SavedGame::kRewardFnFieldNumber;
const int SavedGame::kRewardsFieldNumber;
const int SavedGame::kReturnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SavedGame::SavedGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_SavedGame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy_proto.SavedGame)
}
SavedGame::SavedGame(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  rules_(arena),
  phases_(arena),
  assigned_powers_(arena),
  rewards_(arena),
  kwargs_(arena),
  players_(arena),
  returns_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_SavedGame.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy_proto.SavedGame)
}
SavedGame::SavedGame(const SavedGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rules_(from.rules_),
      phases_(from.phases_),
      assigned_powers_(from.assigned_powers_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rewards_.MergeFrom(from.rewards_);
  kwargs_.MergeFrom(from.kwargs_);
  returns_.MergeFrom(from.returns_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.map().size() > 0) {
    map_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map(),
      GetArenaNoVirtual());
  }
  done_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.done_reason().size() > 0) {
    done_reason_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.done_reason(),
      GetArenaNoVirtual());
  }
  reward_fn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reward_fn().size() > 0) {
    reward_fn_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reward_fn(),
      GetArenaNoVirtual());
  }
  ::memcpy(&start_phase_ix_, &from.start_phase_ix_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_partial_game_) -
    reinterpret_cast<char*>(&start_phase_ix_)) + sizeof(is_partial_game_));
  // @@protoc_insertion_point(copy_constructor:diplomacy_proto.SavedGame)
}

void SavedGame::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  done_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_fn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_phase_ix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_partial_game_) -
      reinterpret_cast<char*>(&start_phase_ix_)) + sizeof(is_partial_game_));
}

SavedGame::~SavedGame() {
  // @@protoc_insertion_point(destructor:diplomacy_proto.SavedGame)
  SharedDtor();
}

void SavedGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  done_reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_fn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SavedGame::ArenaDtor(void* object) {
  SavedGame* _this = reinterpret_cast< SavedGame* >(object);
  (void)_this;
}
void SavedGame::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SavedGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SavedGame::descriptor() {
  ::protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SavedGame& SavedGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5fproto_2fgame_2eproto::scc_info_SavedGame.base);
  return *internal_default_instance();
}


void SavedGame::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy_proto.SavedGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  phases_.Clear();
  assigned_powers_.Clear();
  rewards_.Clear();
  kwargs_.Clear();
  players_.Clear();
  returns_.Clear();
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  map_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  done_reason_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reward_fn_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&start_phase_ix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_partial_game_) -
      reinterpret_cast<char*>(&start_phase_ix_)) + sizeof(is_partial_game_));
  _internal_metadata_.Clear();
}

bool SavedGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy_proto.SavedGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.SavedGame.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string map = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->map().data(), static_cast<int>(this->map().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.SavedGame.map"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string rules = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_rules()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rules(this->rules_size() - 1).data(),
            static_cast<int>(this->rules(this->rules_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.SavedGame.rules"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .diplomacy_proto.PhaseHistory phases = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_phases()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string assigned_powers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_assigned_powers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->assigned_powers(this->assigned_powers_size() - 1).data(),
            static_cast<int>(this->assigned_powers(this->assigned_powers_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.SavedGame.assigned_powers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string done_reason = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_done_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->done_reason().data(), static_cast<int>(this->done_reason().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.SavedGame.done_reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reward_fn = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reward_fn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reward_fn().data(), static_cast<int>(this->reward_fn().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.SavedGame.reward_fn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .diplomacy_proto.FloatList> rewards = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          SavedGame_RewardsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SavedGame_RewardsEntry_DoNotUse,
              ::std::string, ::diplomacy_proto::FloatList,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::diplomacy_proto::FloatList > > parser(&rewards_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.SavedGame.RewardsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start_phase_ix = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_phase_ix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .diplomacy_proto.SavedGame.KeywordArgs> kwargs = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          SavedGame_KwargsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SavedGame_KwargsEntry_DoNotUse,
              ::std::string, ::diplomacy_proto::SavedGame_KeywordArgs,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::diplomacy_proto::SavedGame_KeywordArgs > > parser(&kwargs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.SavedGame.KwargsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string players = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_players()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->players(this->players_size() - 1).data(),
            static_cast<int>(this->players(this->players_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.SavedGame.players"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_partial_game = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_partial_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .diplomacy_proto.FloatList> returns = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          SavedGame_ReturnsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SavedGame_ReturnsEntry_DoNotUse,
              ::std::string, ::diplomacy_proto::FloatList,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::diplomacy_proto::FloatList > > parser(&returns_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy_proto.SavedGame.ReturnsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy_proto.SavedGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy_proto.SavedGame)
  return false;
#undef DO_
}

void SavedGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy_proto.SavedGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.SavedGame.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string map = 2;
  if (this->map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map().data(), static_cast<int>(this->map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.SavedGame.map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->map(), output);
  }

  // repeated string rules = 3;
  for (int i = 0, n = this->rules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rules(i).data(), static_cast<int>(this->rules(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.SavedGame.rules");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rules(i), output);
  }

  // repeated .diplomacy_proto.PhaseHistory phases = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->phases_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->phases(static_cast<int>(i)),
      output);
  }

  // repeated string assigned_powers = 5;
  for (int i = 0, n = this->assigned_powers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assigned_powers(i).data(), static_cast<int>(this->assigned_powers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.SavedGame.assigned_powers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->assigned_powers(i), output);
  }

  // string done_reason = 6;
  if (this->done_reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->done_reason().data(), static_cast<int>(this->done_reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.SavedGame.done_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->done_reason(), output);
  }

  // string reward_fn = 7;
  if (this->reward_fn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reward_fn().data(), static_cast<int>(this->reward_fn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.SavedGame.reward_fn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->reward_fn(), output);
  }

  // map<string, .diplomacy_proto.FloatList> rewards = 8;
  if (!this->rewards().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::FloatList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.SavedGame.RewardsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->rewards().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->rewards().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::FloatList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::FloatList >::const_iterator
          it = this->rewards().begin();
          it != this->rewards().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SavedGame_RewardsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rewards_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SavedGame_RewardsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::FloatList >::const_iterator
          it = this->rewards().begin();
          it != this->rewards().end(); ++it) {
        entry.reset(rewards_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // int32 start_phase_ix = 9;
  if (this->start_phase_ix() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->start_phase_ix(), output);
  }

  // map<string, .diplomacy_proto.SavedGame.KeywordArgs> kwargs = 10;
  if (!this->kwargs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::SavedGame_KeywordArgs >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.SavedGame.KwargsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->kwargs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->kwargs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::SavedGame_KeywordArgs >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::SavedGame_KeywordArgs >::const_iterator
          it = this->kwargs().begin();
          it != this->kwargs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SavedGame_KwargsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kwargs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SavedGame_KwargsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::SavedGame_KeywordArgs >::const_iterator
          it = this->kwargs().begin();
          it != this->kwargs().end(); ++it) {
        entry.reset(kwargs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string players = 11;
  for (int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->players(i).data(), static_cast<int>(this->players(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.SavedGame.players");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->players(i), output);
  }

  // bool is_partial_game = 12;
  if (this->is_partial_game() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_partial_game(), output);
  }

  // map<string, .diplomacy_proto.FloatList> returns = 13;
  if (!this->returns().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::FloatList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.SavedGame.ReturnsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->returns().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->returns().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::FloatList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::FloatList >::const_iterator
          it = this->returns().begin();
          it != this->returns().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SavedGame_ReturnsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(returns_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SavedGame_ReturnsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::FloatList >::const_iterator
          it = this->returns().begin();
          it != this->returns().end(); ++it) {
        entry.reset(returns_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy_proto.SavedGame)
}

::google::protobuf::uint8* SavedGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy_proto.SavedGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.SavedGame.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string map = 2;
  if (this->map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map().data(), static_cast<int>(this->map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.SavedGame.map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->map(), target);
  }

  // repeated string rules = 3;
  for (int i = 0, n = this->rules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rules(i).data(), static_cast<int>(this->rules(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.SavedGame.rules");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->rules(i), target);
  }

  // repeated .diplomacy_proto.PhaseHistory phases = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->phases_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->phases(static_cast<int>(i)), deterministic, target);
  }

  // repeated string assigned_powers = 5;
  for (int i = 0, n = this->assigned_powers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assigned_powers(i).data(), static_cast<int>(this->assigned_powers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.SavedGame.assigned_powers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->assigned_powers(i), target);
  }

  // string done_reason = 6;
  if (this->done_reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->done_reason().data(), static_cast<int>(this->done_reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.SavedGame.done_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->done_reason(), target);
  }

  // string reward_fn = 7;
  if (this->reward_fn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reward_fn().data(), static_cast<int>(this->reward_fn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.SavedGame.reward_fn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->reward_fn(), target);
  }

  // map<string, .diplomacy_proto.FloatList> rewards = 8;
  if (!this->rewards().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::FloatList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.SavedGame.RewardsEntry.key");
      }
    };

    if (deterministic &&
        this->rewards().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->rewards().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::FloatList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::FloatList >::const_iterator
          it = this->rewards().begin();
          it != this->rewards().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SavedGame_RewardsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rewards_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SavedGame_RewardsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::FloatList >::const_iterator
          it = this->rewards().begin();
          it != this->rewards().end(); ++it) {
        entry.reset(rewards_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // int32 start_phase_ix = 9;
  if (this->start_phase_ix() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->start_phase_ix(), target);
  }

  // map<string, .diplomacy_proto.SavedGame.KeywordArgs> kwargs = 10;
  if (!this->kwargs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::SavedGame_KeywordArgs >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.SavedGame.KwargsEntry.key");
      }
    };

    if (deterministic &&
        this->kwargs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->kwargs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::SavedGame_KeywordArgs >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::SavedGame_KeywordArgs >::const_iterator
          it = this->kwargs().begin();
          it != this->kwargs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SavedGame_KwargsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kwargs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SavedGame_KwargsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::SavedGame_KeywordArgs >::const_iterator
          it = this->kwargs().begin();
          it != this->kwargs().end(); ++it) {
        entry.reset(kwargs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string players = 11;
  for (int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->players(i).data(), static_cast<int>(this->players(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy_proto.SavedGame.players");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->players(i), target);
  }

  // bool is_partial_game = 12;
  if (this->is_partial_game() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_partial_game(), target);
  }

  // map<string, .diplomacy_proto.FloatList> returns = 13;
  if (!this->returns().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::FloatList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy_proto.SavedGame.ReturnsEntry.key");
      }
    };

    if (deterministic &&
        this->returns().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->returns().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy_proto::FloatList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::FloatList >::const_iterator
          it = this->returns().begin();
          it != this->returns().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SavedGame_ReturnsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(returns_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SavedGame_ReturnsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::FloatList >::const_iterator
          it = this->returns().begin();
          it != this->returns().end(); ++it) {
        entry.reset(returns_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy_proto.SavedGame)
  return target;
}

size_t SavedGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy_proto.SavedGame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string rules = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->rules_size());
  for (int i = 0, n = this->rules_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->rules(i));
  }

  // repeated .diplomacy_proto.PhaseHistory phases = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->phases_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->phases(static_cast<int>(i)));
    }
  }

  // repeated string assigned_powers = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->assigned_powers_size());
  for (int i = 0, n = this->assigned_powers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->assigned_powers(i));
  }

  // map<string, .diplomacy_proto.FloatList> rewards = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->rewards_size());
  {
    ::std::unique_ptr<SavedGame_RewardsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::FloatList >::const_iterator
        it = this->rewards().begin();
        it != this->rewards().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(rewards_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<string, .diplomacy_proto.SavedGame.KeywordArgs> kwargs = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->kwargs_size());
  {
    ::std::unique_ptr<SavedGame_KwargsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::SavedGame_KeywordArgs >::const_iterator
        it = this->kwargs().begin();
        it != this->kwargs().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(kwargs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // repeated string players = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->players_size());
  for (int i = 0, n = this->players_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->players(i));
  }

  // map<string, .diplomacy_proto.FloatList> returns = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->returns_size());
  {
    ::std::unique_ptr<SavedGame_ReturnsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::diplomacy_proto::FloatList >::const_iterator
        it = this->returns().begin();
        it != this->returns().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(returns_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string map = 2;
  if (this->map().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->map());
  }

  // string done_reason = 6;
  if (this->done_reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->done_reason());
  }

  // string reward_fn = 7;
  if (this->reward_fn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reward_fn());
  }

  // int32 start_phase_ix = 9;
  if (this->start_phase_ix() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_phase_ix());
  }

  // bool is_partial_game = 12;
  if (this->is_partial_game() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SavedGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy_proto.SavedGame)
  GOOGLE_DCHECK_NE(&from, this);
  const SavedGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SavedGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy_proto.SavedGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy_proto.SavedGame)
    MergeFrom(*source);
  }
}

void SavedGame::MergeFrom(const SavedGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy_proto.SavedGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
  phases_.MergeFrom(from.phases_);
  assigned_powers_.MergeFrom(from.assigned_powers_);
  rewards_.MergeFrom(from.rewards_);
  kwargs_.MergeFrom(from.kwargs_);
  players_.MergeFrom(from.players_);
  returns_.MergeFrom(from.returns_);
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.map().size() > 0) {
    set_map(from.map());
  }
  if (from.done_reason().size() > 0) {
    set_done_reason(from.done_reason());
  }
  if (from.reward_fn().size() > 0) {
    set_reward_fn(from.reward_fn());
  }
  if (from.start_phase_ix() != 0) {
    set_start_phase_ix(from.start_phase_ix());
  }
  if (from.is_partial_game() != 0) {
    set_is_partial_game(from.is_partial_game());
  }
}

void SavedGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy_proto.SavedGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedGame::CopyFrom(const SavedGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy_proto.SavedGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedGame::IsInitialized() const {
  return true;
}

void SavedGame::Swap(SavedGame* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SavedGame* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SavedGame::UnsafeArenaSwap(SavedGame* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SavedGame::InternalSwap(SavedGame* other) {
  using std::swap;
  rules_.InternalSwap(CastToBase(&other->rules_));
  CastToBase(&phases_)->InternalSwap(CastToBase(&other->phases_));
  assigned_powers_.InternalSwap(CastToBase(&other->assigned_powers_));
  rewards_.Swap(&other->rewards_);
  kwargs_.Swap(&other->kwargs_);
  players_.InternalSwap(CastToBase(&other->players_));
  returns_.Swap(&other->returns_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_.Swap(&other->map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  done_reason_.Swap(&other->done_reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reward_fn_.Swap(&other->reward_fn_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_phase_ix_, other->start_phase_ix_);
  swap(is_partial_game_, other->is_partial_game_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SavedGame::GetMetadata() const {
  protobuf_diplomacy_5fproto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5fproto_2fgame_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace diplomacy_proto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::Message* Arena::CreateMaybeMessage< ::diplomacy_proto::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::Message >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::State_Builds* Arena::CreateMaybeMessage< ::diplomacy_proto::State_Builds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::State_Builds >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::State_UnitsEntry_DoNotUse* Arena::CreateMaybeMessage< ::diplomacy_proto::State_UnitsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::State_UnitsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::State_CentersEntry_DoNotUse* Arena::CreateMaybeMessage< ::diplomacy_proto::State_CentersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::State_CentersEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::State_HomesEntry_DoNotUse* Arena::CreateMaybeMessage< ::diplomacy_proto::State_HomesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::State_HomesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::State_InfluenceEntry_DoNotUse* Arena::CreateMaybeMessage< ::diplomacy_proto::State_InfluenceEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::State_InfluenceEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::State_CivilDisorderEntry_DoNotUse* Arena::CreateMaybeMessage< ::diplomacy_proto::State_CivilDisorderEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::State_CivilDisorderEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::State_BuildsEntry_DoNotUse* Arena::CreateMaybeMessage< ::diplomacy_proto::State_BuildsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::State_BuildsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::State* Arena::CreateMaybeMessage< ::diplomacy_proto::State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::State >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::PhaseHistory_PolicyDetails* Arena::CreateMaybeMessage< ::diplomacy_proto::PhaseHistory_PolicyDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::PhaseHistory_PolicyDetails >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::PhaseHistory_OrdersEntry_DoNotUse* Arena::CreateMaybeMessage< ::diplomacy_proto::PhaseHistory_OrdersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::PhaseHistory_OrdersEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::PhaseHistory_ResultsEntry_DoNotUse* Arena::CreateMaybeMessage< ::diplomacy_proto::PhaseHistory_ResultsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::PhaseHistory_ResultsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::PhaseHistory_PolicyEntry_DoNotUse* Arena::CreateMaybeMessage< ::diplomacy_proto::PhaseHistory_PolicyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::PhaseHistory_PolicyEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::PhaseHistory_StateValueEntry_DoNotUse* Arena::CreateMaybeMessage< ::diplomacy_proto::PhaseHistory_StateValueEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::PhaseHistory_StateValueEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::PhaseHistory_PossibleOrdersEntry_DoNotUse* Arena::CreateMaybeMessage< ::diplomacy_proto::PhaseHistory_PossibleOrdersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::PhaseHistory_PossibleOrdersEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::PhaseHistory* Arena::CreateMaybeMessage< ::diplomacy_proto::PhaseHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::PhaseHistory >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::SavedGame_KeywordArgs* Arena::CreateMaybeMessage< ::diplomacy_proto::SavedGame_KeywordArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::SavedGame_KeywordArgs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::SavedGame_KwargsEntry_DoNotUse* Arena::CreateMaybeMessage< ::diplomacy_proto::SavedGame_KwargsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::SavedGame_KwargsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::SavedGame_RewardsEntry_DoNotUse* Arena::CreateMaybeMessage< ::diplomacy_proto::SavedGame_RewardsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::SavedGame_RewardsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::SavedGame_ReturnsEntry_DoNotUse* Arena::CreateMaybeMessage< ::diplomacy_proto::SavedGame_ReturnsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::SavedGame_ReturnsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy_proto::SavedGame* Arena::CreateMaybeMessage< ::diplomacy_proto::SavedGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy_proto::SavedGame >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
